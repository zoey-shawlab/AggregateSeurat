# AggregateSeurat

### Creating a Shiny App that will allow a use to input a Seurat Object, select the headers from the Seurat Object that they want to see,
#then Aggregate Expression, display as a table, and download

# installing necessary packages
library(shiny)
library(Seurat)
library(SeuratDisk)
library(dplyr)
library(DT)
library(zip)

options(shiny.maxRequestSize = 10000*1024^2)

# writing ui
ui <- fluidPage(
  titlePanel("Pseudobulk scRNA-Seq Seurat Object"), 
  sidebarLayout(
    sidebarPanel(
      textInput("projectName", "Project Name"),
      fileInput("seuratobj", "Choose Seurat Object",
                accept = c(".h5seurat", ".rds")),
      checkboxInput("headers", "File has headers", TRUE),
      actionButton("uploadButton", "Upload Seurat Object"),
      uiOutput("select_pseudobulk"),
      uiOutput("pseudobulk_button"),
      uiOutput("select_layer"),
      uiOutput("download_select_ui"),
      uiOutput("download_ui"),
      tags$div(
        style = "margin-top: 20px;",
        tags$a(
          href = "https://github.com/shawlab-moffitt/BERLIN/blob/main/2-Single_Cell_RNAseq_Pipeline/Output/Single_Cell_RNAseq_Output/GSE116256_AMLscRNA_h5friendly.h5seurat",
          "Download Example Seurat Object",
          style = "color: blue; text-decoration: underline;",
          target = "_blank"
        )
      )
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Original Seurat Object", dataTableOutput("contents")),
        tabPanel("Pseudobulked Seurat Object", dataTableOutput("pseudobulked"))
      )
    )
  )
)


# writing server
server <- function(input, output, session) {
  
  seurat_obj <- reactive({
    inFile <- input$seuratobj
    if (is.null(inFile)) {
      file_path <- "~/Downloads/example.h5seurat"
      if (file.exists(file_path)) {
        seurat_obj <- LoadH5Seurat(file_path)
        return(seurat_obj)
      } else {
        showNotification("The default Seurat object file is not found. Please check the file path.", type = "error")
        return(NULL)
      }
    }
    
    file_extension <- gsub(".*\\.", "", inFile$name)
    if(file_extension == "h5seurat"){
      seurat_obj <- LoadH5Seurat(inFile$datapath)
    }else if (file_extension == "rds"){
      seurat_obj <- readRDS(inFile$datapath)
    }
    return(seurat_obj)
  })

  
  # original data table
  output$contents <- renderDataTable({
    seurat <- seurat_obj()
    req(seurat)
    seurat@meta.data
  })
  
  # select pseudobulk button
  output$select_pseudobulk <- renderUI({
    seurat <- seurat_obj()
    req(seurat)
    
    col_names <- colnames(seurat@meta.data)
    selectizeInput("selected_columns", "Select Columns to Pseudobulk", choices = col_names, multiple = TRUE)
  })
  
  output$pseudobulk_button <- renderUI({
    if (length(input$selected_columns) > 0) {
      actionButton("pseudobulkButton", "Pseudobulk")
    } else {
      NULL
    }
  })
  saved_pseudobulked <- reactiveVal(NULL)
  saved_seurat <- reactiveVal(NULL)
  aggregated_data <- reactiveVal(NULL)
  
  # pseudobulk seurat object
  observeEvent(input$pseudobulkButton, {
    seurat <- seurat_obj()
    req(seurat)
    
    selected_columns <- input$selected_columns
    
    if (length(selected_columns) > 0 && all(selected_columns %in% colnames(seurat@meta.data))) {
      aggregated_seurat <- AggregateExpression(seurat, group.by = selected_columns, return.seurat = TRUE)
      saved_seurat(aggregated_seurat)
    } else {
      showNotification("Selected columns not found in metadata", type = "error")
    }
  })
  
  # pseudobulked table
  output$pseudobulked <- renderDT({
    counts_matrix <- saved_seurat()@assays[["RNA"]]@layers[["counts"]]
    pseudobulk_DT <- as.data.frame(counts_matrix)
    colnames(pseudobulk_DT) <- saved_seurat()@active.ident
    pseudobulk_DT$Genes <- seurat_obj()@assays[["RNA"]]@counts@Dimnames[[1]]
    pseudobulk_DT <- relocate(pseudobulk_DT, "Genes")
    pseudobulk_DT
  })
  
  
  # download dropdown
  output$download_select_ui <- renderUI({
    req(saved_seurat())
    rna_assay <- saved_seurat()@assays[["RNA"]]
    layers <- rna_assay@layers
    layer_names <- names(layers)
    
    selectizeInput("file_type", "Select file type to download", 
                   choices = c("Pseudobulked Seurat" = "rds",
                               "Metadata (tsv)" = "tsv_metadata",
                               layer_names),
                   multiple = TRUE)
  })
  
  output$download_ui <- renderUI({
    req(saved_seurat())
    downloadButton("downloadDataZip", "Download All as ZIP")
  })
  
  
  #download all files selected 
  output$downloadDataZip <- downloadHandler(
    filename = function() {
      paste0(input$projectName, "_files.zip")
    },
    content = function(file) {
      temp_dir <- tempdir()
      temp_files <- c()
      
      selected_files <- input$file_type
      
      
      if ("rds" %in% selected_files) {
        rds_path <- file.path(temp_dir, paste0(input$projectName, "_pseudobulked_data.rds"))
        saveRDS(saved_seurat(), rds_path)
        temp_files <- c(temp_files, rds_path)
      }
      
      
      if ("tsv_metadata" %in% selected_files) {
        req(saved_seurat())
        metadata_df <- saved_seurat()@meta.data
        tsv_metadata_path <- file.path(temp_dir, paste0(input$projectName, "_metadata.tsv"))
        write.table(metadata_df, tsv_metadata_path, sep = "\t", row.names = FALSE, quote = FALSE)
        temp_files <- c(temp_files, tsv_metadata_path)
      }
      
      
      rna_assay <- saved_seurat()@assays[["RNA"]]
      layers <- rna_assay@layers
      for (layer_name in selected_files) {
        if (layer_name %in% names(layers)) {
          layer_matrix <- as.data.frame(layers[[layer_name]])
          colnames(layer_matrix) <- saved_seurat()@active.ident
          layer_matrix$Genes <- seurat_obj()@assays[["RNA"]]@counts@Dimnames[[1]]
          layer_matrix <- relocate(layer_matrix, "Genes")
          file_path <- file.path(temp_dir, paste0(layer_name, ".tsv"))
          write.table(layer_matrix, file_path, sep = "\t", row.names = FALSE, col.names = TRUE)
          temp_files <- c(temp_files, file_path)
        }
      }
      
      # zip file of the selected files
      if (length(temp_files) > 0) {
        zip::zipr(
          zipfile = file,
          files = temp_files
        )
      } else {
        
        showNotification("Error: No files to download.", type = "error")
      }
    },
    contentType = "application/zip"
  )

}

shinyApp(ui = ui, server = server)
